--Services--
local Players = game:GetService("Players")
local ServerStorage = game:GetService("ServerStorage")
local ServerScriptStorage = game:GetService("ServerScriptService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local DataStore = game:GetService("DataStoreService")
local TweenService = game:GetService("TweenService")
local MarketPlaceService = game:GetService("MarketplaceService")
local BadgeService = game:GetService("BadgeService")
--Data Stores
local LevelData = DataStore:GetDataStore("LevelData")
local EXPData = DataStore:GetDataStore("EXPData")
local CoinsData = DataStore:GetDataStore("CoinsData")
local DiamonsData = DataStore:GetDataStore("DiamondsData")
local WinsData = DataStore:GetDataStore("WinsData")
local GamesPlayedData = DataStore:GetDataStore("GamesPlayedData")
--Events
local EndGameServer = ReplicatedStorage.EndGameServer
local MoveParts = ReplicatedStorage.MoveParts
local GameStarting = ReplicatedStorage.GameStarting
local StartGameServer = ReplicatedStorage.StartGameServer
local StartGame = ReplicatedStorage.StartGame
local PlayerJoinEvent = ReplicatedStorage.PlayerJoin
local CutSceneEvent = ReplicatedStorage.CutScene
local TeleEvent = ReplicatedStorage.Teleport
local EliminatedTextEvent = ReplicatedStorage.EliminatedText
local GiveRewards = ReplicatedStorage.GiveRewards
local ForcefieldEvent = ReplicatedStorage.Forcefield
local AddToPowerupTable = ReplicatedStorage.AddToPowerupTable
--
local MaxSpots = ServerScriptStorage.MaxSpots
local SpotsTaken = ServerScriptStorage.SpotsTaken
local GameStarted = false
local maps = ServerStorage.Maps
local ServerRound = ServerScriptStorage.Round
local roundtime = 0
local PlayersInGame = {}
local SpeedPowers = {}
local JumpPowers = {}
local InvinciblePowers = {}
local Times2 = 100744638
local FirstWinBadge = 2129308462
local Win5Badge = 2129308463
local Win10Badge = 2129308464
local win50Badge = 2129308465
local win100Badge = 2129308476


-- This function fires when the first game starts, it picks a random map and adds it to the workspace as well as teleports all the players to the map.
local function firstgame()
	GameStarted = true
	wait(1)
	GameStarting:FireAllClients()
	wait(10)
	local MapFolder = maps["15+"]:GetChildren()
	local StartMap = MapFolder[math.random(1, #MapFolder)]
	local StartMap1 = StartMap:Clone()
	StartMap:Destroy()
	StartMap1.Parent = game.Workspace
	local StartMapName = StartMap1.Name
	StartMap1.Name = "Map"
	StartMap1.Settings.MaxPlayers.Value = 10
	roundtime = StartMap1.Settings.Time.Value
	MaxSpots.Value = 10
	SpotsTaken.Value = 0
	wait(3)
	local plrs = Players:GetPlayers()
	local children = StartMap1:GetChildren()
	local Spawns = {}
	
	--The first part of this function is just setting everything up for the rest of the function by making variables and picking a map
	
	for i=1,#children do
		if children[i].Name == "SpawnLocation" then
			table.insert(Spawns, children[i])
		end
	end
	
	--Next we are creating a table for all the spawn locations in the map by using table.insert we do this so it will be easier to assign a spawn location to a player
	
	for i = 1, #plrs do
		local player = plrs[i]
		local location = Spawns[i]
		player.Character.HumanoidRootPart.CFrame = CFrame.new(location.Position + Vector3.new(0, 15, 0)) * CFrame.Angles(0, math.rad(-90), 0)
		player.RespawnLocation = location
	end
	
	-- We are teleporting the players to the spawn point they are assigned to. The only way to move a player correctly is by changing the position or CFrame of the humanoid root part
	
	for _, Plr in ipairs(Players:GetPlayers()) do
		for _, Tool in pairs(Plr.Backpack:GetChildren()) do
			if Tool:IsA("Tool") then
				Tool:Destroy()
			end
		end
		Plr.Character:WaitForChild("Humanoid").MaxHealth = 100
		Plr.Character:WaitForChild("Humanoid").Health = 100
		local FF = Plr.Character:FindFirstChild("ForceField")
		if FF ~= nil then
			FF:Destroy()
		end
	end
	--This is checking if a player has a tool in their inventory and deletes it because once the round starts it checks if the player has bought the power up to get the tool
	--This also Changes each players health back to normals stats because if they have powerups those stats will be changed once the game begins
	for _, Plr in ipairs(SpeedPowers) do
		game:GetService("InsertService"):LoadAsset(99119158):FindFirstChildWhichIsA("BackpackItem").Parent = Plr.Backpack
	end
	for _, Plr in ipairs(JumpPowers) do
		game:GetService("InsertService"):LoadAsset(16688968):FindFirstChildWhichIsA("BackpackItem").Parent = Plr.Backpack
	end
	for _, Plr in ipairs(InvinciblePowers) do
		local forceField = Instance.new("ForceField")
		forceField.Visible = false
		forceField.Parent = Plr.Character
		Plr.Character:WaitForChild("Humanoid").MaxHealth = math.huge
		Plr.Character:WaitForChild("Humanoid").Health = math.huge
	end
	SpeedPowers = {}
	JumpPowers = {}
	InvinciblePowers = {}
	
	--This gives the players their powerups, Once a player buys a powerup they are put into a group regarding their powerup so then the game checks if they are in that group and if they are they recieve the power up
	-- Speed and jump gives a speed coil and gravity coil while invincibilty gives a player infinite health.
	
	MoveParts:FireAllClients(StartMapName)
	StartGameServer:Fire(roundtime, MaxSpots.Value, StartMapName, maps["15+"].Name, plrs)
	StartGame:FireAllClients(roundtime, MaxSpots.Value)
	CutSceneEvent:FireAllClients(StartMapName)
	
	--This moves all of the moving parts to the workspace LOCALLY. This is done locally because if they are all in the server workspace it will cause too much lag.
	
	for _, Plr in next, plrs do
		wait()
		local OldGP
		local NewGP
		local success, errormessage = pcall(function()
			OldGP = GamesPlayedData:GetAsync(Plr.UserId.."-GamesPlayed")
		end)
		if success then
			NewGP = OldGP + 1
			GamesPlayedData:SetAsync(Plr.UserId.."-GamesPlayed", NewGP)
		end
	end
	
	--Gives all of the players a game played on their stats and then saves it to a datastore
	
end


-- When a player buys a power-up they get added to this group 
AddToPowerupTable.Event:Connect(function(Plr, Powerup)
	if Powerup == "Jump" then
		table.insert(JumpPowers, Plr)
	elseif Powerup == "Speed" then
		table.insert(SpeedPowers, Plr)
	elseif Powerup == "Invincible" then
		table.insert(InvinciblePowers, Plr)
	end
end)


--Checks if enough players have joined the game to start it then runs the function above
PlayerJoinEvent.OnServerEvent:Connect(function(player, TeleportData)
	ServerScriptStorage.Joined.Value = ServerScriptStorage.Joined.Value + 1
	if ServerScriptStorage.Joined.Value == TeleportData[1] then
		if GameStarted == false then
			firstgame()
		end
	end
end)

wait(30)
if GameStarted == false then
	print("Force start")
	firstgame()
end


-- Once a game ends this function fires, what it doesnt is pretty much start a new game based on how many players are left.
--It is almost the same as the firstgame() function above so I won't repeat what some of the stuff inside of it does.
EndGameServer.Event:Connect(function(FinishedPlayers)
	wait(2)
	local MapFolder
	local MaxP
	local function RunGame()
		local StartMap = MapFolder[math.random(1, #MapFolder)]
		local StartMap1 = StartMap:Clone()
		local StartMapFolder = StartMap.Parent
		StartMap:Destroy()
		StartMap1.Parent = game.Workspace
		local StartMapName = StartMap1.Name
		StartMap1.Name = "Map"
		StartMap1.Settings.MaxPlayers.Value = MaxP
		roundtime = StartMap1.Settings.Time.Value
		SpotsTaken.Value = 0
		wait(3)
		local plrs = Players:GetChildren()
		local children = StartMap1:GetChildren()
		local Spawns = {}
		for i=1,#children do
			if children[i].Name == "SpawnLocation" then
				table.insert(Spawns, children[i])
			end
		end
		for i = 1, #FinishedPlayers do
			local player = FinishedPlayers[i]
			local location = Spawns[i]
			if player.Character ~= nil then
				player.Character.HumanoidRootPart.CFrame = CFrame.new(location.Position + Vector3.new(0, 15, 0)) * CFrame.Angles(0, math.rad(-90), 0)
				player.RespawnLocation = location
			end
		end

		for _, Plr in ipairs(FinishedPlayers) do
			if Plr.Character ~= nil then
				Plr.Character.Humanoid.WalkSpeed = 16
				Plr.Character.Humanoid.JumpHeight = 7.2
				Plr.Character:WaitForChild("Humanoid").MaxHealth = 100
				Plr.Character:WaitForChild("Humanoid").Health = 100
				local FF = Plr.Character:FindFirstChild("ForceField")
				if FF ~= nil then
					FF:Destroy()
				end
			end
			
		end
		for _, Plr in ipairs(SpeedPowers) do
			if Plr.Backpack ~= nil then
				game:GetService("InsertService"):LoadAsset(99119158):FindFirstChildWhichIsA("BackpackItem").Parent = Plr.Backpack
			end
		end
		for _, Plr in ipairs(JumpPowers) do
			if Plr.Backpack ~= nil then
				game:GetService("InsertService"):LoadAsset(16688968):FindFirstChildWhichIsA("BackpackItem").Parent = Plr.Backpack
			end
		end
		for _, Plr in ipairs(InvinciblePowers) do
			if Plr.Character ~= nil then
				local forceField = Instance.new("ForceField")
				forceField.Parent = Plr.Character
				forceField.Visible = false
				Plr.Character:WaitForChild("Humanoid").MaxHealth = math.huge
				Plr.Character:WaitForChild("Humanoid").Health = math.huge
			end
		end
		SpeedPowers = {}
		JumpPowers = {}
		InvinciblePowers = {}
		local SpawnLocations = game.Workspace.WaitingLobby.Spawns:GetChildren()
		for _, Spwn in next, SpawnLocations do
			Spwn.Enabled = true
		end
		for _, Plr in next, FinishedPlayers do
			CutSceneEvent:FireClient(Plr, StartMapName)
		end
		MoveParts:FireAllClients(StartMapName)
		StartGameServer:Fire(roundtime, MaxP, StartMapName, StartMapFolder, FinishedPlayers)
		StartGame:FireAllClients(roundtime, MaxP)
		
	end
	
	--This is the map deciding part. It checks the number of players in the group "FinishedPlayers" and chooses a map from that. The maps are organized in different folders and it chooses a random map from the selected folder
	
	if #FinishedPlayers > 15 then
		MapFolder = maps["15+"]:GetChildren()
		if #FinishedPlayers > 25 then
			MaxP = 25
		elseif #FinishedPlayers > 20 and #FinishedPlayers < 26 then
			MaxP = 20
		elseif #FinishedPlayers > 15 and #FinishedPlayers < 21 then
			MaxP = 15
		end
	elseif #FinishedPlayers > 10 and #FinishedPlayers < 16 then
		MapFolder = maps["10-15"]:GetChildren()
		MaxP = 10
		RunGame()
	elseif #FinishedPlayers > 5 and #FinishedPlayers < 11 then
		MapFolder = maps["5-10"]:GetChildren()
		MaxP = 5
		RunGame()
	elseif #FinishedPlayers > 0 and #FinishedPlayers < 6 and #FinishedPlayers ~= 1 then
		MapFolder = maps["finals"]:GetChildren()
		MaxP = 1
		RunGame()
	elseif #FinishedPlayers == 1 then
		local Plrs = Players:GetPlayers()
		local Plr = FinishedPlayers[1]
		local MaxP = 1
		local Folder = "Finals"
		local teleportOptions = Instance.new("TeleportOptions")
		local Rig = game.Workspace.WinnerRig
		local Diamond = game.Workspace.Diamond
		local goal = {}
		local tweenInfo = TweenInfo.new(4, Enum.EasingStyle.Linear)
		local Animation = Rig.Animation
		local humanoid = Rig:FindFirstChild("Humanoid")
		local Animate = humanoid:LoadAnimation(Animation)
		goal.Position = Vector3.new(-27280.932, 32.887, 82416.039)
		local tween = TweenService:Create(Diamond, tweenInfo, goal)
		Rig.Name = ""
		humanoid:ApplyDescription(Players:GetHumanoidDescriptionFromUserId(Plr.UserId))
		CutSceneEvent:FireAllClients("Winner", Plr.Name)
		Animate:Play()
		wait(4)
		tween:Play()
		wait(5)
		EliminatedTextEvent:FireClient(Plr, false, MaxP, Folder, true)
	elseif #FinishedPlayers < 1 then	
	end
end)


--Once a player is eliminated they can teleport back to the lobby place
TeleEvent.OnServerEvent:Connect(function(LocalPlayer)
	local teleportOptions = Instance.new("TeleportOptions")
	teleportOptions.ShouldReserveServer = false
	TeleportService:TeleportAsync(11454735662, {LocalPlayer}, teleportOptions)
end)


--gives a player rewards based on how far they made it
GiveRewards.OnServerEvent:Connect(function(LocalPlayer, EarnedCoins, EarnedDiamonds, Wins, Folder)
	
	if Folder == "15+" then
		EarnedCoins = 15
		EarnedDiamonds = 0
	elseif Folder == "10-15"then
		EarnedCoins = 30
		EarnedDiamonds = 0
	elseif Folder == "5-10"then
		EarnedCoins = 50
		EarnedDiamonds = 0
	elseif Folder == nil then
		EarnedCoins = 100
		EarnedDiamonds = 0
	elseif Folder == "Finals" then
		EarnedCoins = 200
		EarnedDiamonds = 1
		Wins = 1
	end
	
	--It checks what was the folder of the last game and decides how far the player made it from there.
	--This checks if a player has the Times 2 coins gamepass then gives them double the coins
	if MarketPlaceService:UserOwnsGamePassAsync(LocalPlayer.UserId, Times2) then
		EarnedCoins = EarnedCoins * 2
	end
	--Load Data
	local OldCoinValue
	local NewCoinValue

	OldCoinValue = LocalPlayer.leaderstats.Coins.Value
	NewCoinValue = OldCoinValue + EarnedCoins
	local OldDiamondValue
	local NewDiamondValue

	OldDiamondValue = LocalPlayer.leaderstats.Diamonds.Value
	NewDiamondValue = OldDiamondValue + EarnedDiamonds
	
	--Assigns a a variable the value of the coins they recieve and adds it to their new coin balance
	--Next we are updating their wins, First we see if they have any yet. We check this because if they have none then they don't have a datastore value for them.
	--If they have none thats the first thing we do is make a datastore value for their wins
	if Wins ~= nil then
		local OldWins
		local NewWins

		OldWins = LocalPlayer.leaderstats.Wins.Value
		NewWins = OldWins + Wins
		if NewWins >= 1 then
			if not BadgeService:UserHasBadgeAsync(LocalPlayer.UserId, FirstWinBadge) then
				BadgeService:AwardBadge(LocalPlayer.UserId, FirstWinBadge)
			end
		end
		if NewWins >= 5 then
			if not BadgeService:UserHasBadgeAsync(LocalPlayer.UserId, Win5Badge) then
				BadgeService:AwardBadge(LocalPlayer.UserId, Win5Badge)
			end
		end
		if NewWins >= 10 then
			if not BadgeService:UserHasBadgeAsync(LocalPlayer.UserId, Win10Badge) then
				BadgeService:AwardBadge(LocalPlayer.UserId, Win10Badge)
			end
		end
		if NewWins >= 50 then
			if not BadgeService:UserHasBadgeAsync(LocalPlayer.UserId, win50Badge) then
				BadgeService:AwardBadge(LocalPlayer.UserId, win50Badge)
			end
		end
		if NewWins >= 100 then
			if not BadgeService:UserHasBadgeAsync(LocalPlayer.UserId, win100Badge) then
				BadgeService:AwardBadge(LocalPlayer.UserId, win100Badge)
			end
		end
		LocalPlayer.leaderstats.Wins.Value = NewWins
		WinsData:SetAsync(LocalPlayer.UserId.."-Wins", NewWins)
		
		--These are for badges, we are checkig how many wins they habe now and giving them a win based on that
		
	end
	--Set Data
	LocalPlayer.leaderstats.Coins.Value = NewCoinValue
	CoinsData:SetAsync(LocalPlayer.UserId.."-Coins", NewCoinValue)
	LocalPlayer.leaderstats.Diamonds.Value = NewDiamondValue
	DiamonsData:SetAsync(LocalPlayer.UserId.."-Diamonds", NewDiamondValue)
	
	--Using :SetAsync to set the new datastore values for coins, diamonds, and wins 
	
end)


--GIves a player a forcefield if they bought the invincibility power up

ForcefieldEvent.OnServerEvent:Connect(function(player)
	local forceField = Instance.new("ForceField")
	forceField.Parent = player.Character
	forceField.Visible = false
	player.Character:WaitForChild("Humanoid").MaxHealth = math.huge
	player.Character:WaitForChild("Humanoid").Health = math.huge
end)
